#!/bin/bash

# 简化的修复脚本
# 快速修复Git配置、推送代码并创建PR

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# 检查是否在Git仓库中
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    log_error "当前目录不是Git仓库"
    exit 1
fi

echo "🚀 快速修复脚本"
echo "=================="

# 1. 检查并添加所有更改
if [ -n "$(git status --porcelain)" ]; then
    log_info "发现未提交的更改，添加所有文件..."
    git add .
    
    # 使用默认提交信息或询问用户
    if [ -z "$1" ]; then
        COMMIT_MSG="feat: update project files and configurations"
        log_info "使用默认提交信息: $COMMIT_MSG"
    else
        COMMIT_MSG="$*"
        log_info "使用自定义提交信息: $COMMIT_MSG"
    fi
    
    git commit -m "$COMMIT_MSG"
    log_success "更改已提交"
else
    log_info "没有未提交的更改"
fi

# 2. 获取当前分支
CURRENT_BRANCH=$(git branch --show-current)
log_info "当前分支: $CURRENT_BRANCH"

# 3. 尝试推送
log_info "推送分支到远程..."
if git push origin "$CURRENT_BRANCH" 2>/dev/null; then
    log_success "推送成功"
elif git push -u origin "$CURRENT_BRANCH" 2>/dev/null; then
    log_success "推送成功（设置upstream）"
else
    log_warning "推送失败，可能需要配置认证"
    echo "请运行完整修复脚本: ./fix-git-and-pr.sh"
    exit 1
fi

# 4. 显示状态
echo ""
log_success "修复完成！"
echo "当前状态:"
git log --oneline -3
echo ""
echo "💡 如需创建PR，请运行: ./fix-git-and-pr.sh"